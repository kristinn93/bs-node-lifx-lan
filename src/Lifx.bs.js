// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Future = require("reason-future/src/Future.bs.js");
var FutureJs = require("reason-future/src/FutureJs.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var NodeLifxLan = require("node-lifx-lan");

function optionsToJs(param) {
  return {
          duration: param[/* duration */0]
        };
}

function optionsFromJs(param) {
  return /* record */[/* duration */param.duration];
}

function turnOnAll(options, _) {
  NodeLifxLan.turnOnBroadcast(optionsToJs(Belt_Option.getWithDefault(options, /* record */[/* duration */100])));
  return /* () */0;
}

function turnOffAll(options, _) {
  NodeLifxLan.turnOffBroadcast(optionsToJs(Belt_Option.getWithDefault(options, /* record */[/* duration */100])));
  return /* () */0;
}

function handleError(prim) {
  return String(prim);
}

function discover() {
  return Future.mapError(Future.mapOk(FutureJs.fromPromise(NodeLifxLan.discover(), handleError), Belt_List.fromArray), (function (_err) {
                console.log(_err);
                return /* Error */Block.__(1, ["asdf"]);
              }));
}

exports.optionsToJs = optionsToJs;
exports.optionsFromJs = optionsFromJs;
exports.turnOnAll = turnOnAll;
exports.turnOffAll = turnOffAll;
exports.handleError = handleError;
exports.discover = discover;
/* node-lifx-lan Not a pure module */
